# the current task (number of MFW currently analyzed) echoed on the screen
cat(mfw, " ")
# #################################################
# module for calculating distances between texts
# #################################################
if((analysis.type == "CA") || (analysis.type == "BCT") || (analysis.type == "MDS")){
# calculating Delta distances to a distance matrix
if(distance.measure == "CD") {
distance.name.on.graph = "Classic Delta distance"
distance.name.on.file = "Classic Delta"
distance.table =
as.matrix(dist(table.with.all.zscores[,1:mfw],
method="manhattan")) / mfw
}
# calculating Argamon’s "Linear Delta"
if(distance.measure == "AL") {
distance.name.on.graph = "Argamon’s Delta distance"
distance.name.on.file = "Argamon’s Delta"
distance.table =
as.matrix(dist(table.with.all.zscores[,1:mfw],
method="euclidean")) / mfw
}
# calculating Delta distances with Eder’s modifications
if(distance.measure == "ED") {
distance.name.on.graph = "Eder’s Delta distance"
distance.name.on.file = "Eder’s Delta"
zscores.plus.e.value = t(t(table.with.all.zscores[,1:mfw])*((1+mfw:1)/mfw))
distance.table = as.matrix(dist(zscores.plus.e.value,method="manhattan"))
}
# calculating Eder’s Simple distance to a distance matrix
if(distance.measure == "ES") {
distance.table =
as.matrix(dist(sqrt(table.with.all.freqs[,1:mfw]),method="manhattan"))
distance.name.on.graph = "Eder’s Simple distance"
distance.name.on.file = "Eder’s Simple"
}
# calculating Manhattan distance to a distance matrix
if(distance.measure == "MH") {
distance.name.on.graph = "Manhattan distance"
distance.name.on.file = "Manhattan"
distance.table =
as.matrix(dist(table.with.all.freqs[,1:mfw],method="manhattan"))
}
# calculating Canberra distance to a distance matrix
if(distance.measure == "CB") {
distance.name.on.graph = "Canberra distance"
distance.name.on.file = "Canberra"
distance.table =
as.matrix(dist(table.with.all.freqs[,1:mfw],method="canberra"))
}
# calculating Euclidean distance to a distance matrix
if(distance.measure == "EU") {
distance.name.on.graph = "Euclidean distance"
distance.name.on.file = "Euclidean"
distance.table =
as.matrix(dist(table.with.all.freqs[,1:mfw],method="euclid"))
}
# replaces the names of the samples (the extension ".txt" is cut off)
rownames(distance.table)=gsub("(\\.txt$)||(\\.xml$)||(\\.html$)||(\\.htm$)",
"",rownames(table.with.all.freqs))
colnames(distance.table)=gsub("(\\.txt$)||(\\.xml$)||(\\.html$)||(\\.htm$)",
"",rownames(table.with.all.freqs))
}
# #################################################
# a tiny module for graph auto-coloring:
# uses the function "assign.plot.colors()"
# #################################################
names.of.the.texts = gsub("(\\.txt)||(\\.xml)||(\\.html)||(\\.htm)","",rownames(table.with.all.freqs))
colors.of.pca.graph = assign.plot.colors(names.of.the.texts,col=colors.on.graphs)
# #################################################
# preparing the graphs
# #################################################
# The name of a given method will appear in the title of the graph
# (if the appropriate option was chosen), and will be pasted into
# a filename of the current job. First, variables are initiated...
name.of.the.method = ""
short.name.of.the.method = ""
mfw.info = mfw
plot.current.task = function() {NULL}
# getting rid of redundant start.at information
if(start.at == 1) {
start.at.info = ""
} else {
start.at.info = paste("Started at",start.at) }
# getting rid of redundant pronoun information
if(delete.pronouns == TRUE) {
pronouns.info = paste("Pronouns deleted")
} else {
pronouns.info = "" }
# getting rid of redundant culling information
if(culling.min == culling.max) {
culling.info = culling.min
} else {
culling.info = paste(culling.min,"-",culling.max,sep="") }
# prepares a dendrogram for the current MFW value for CA plotting
if(analysis.type == "CA") {
name.of.the.method = "Cluster Analysis"
short.name.of.the.method = "CA"
if(dendrogram.layout.horizontal == TRUE) {
dendrogram.margins =  c(5,4,4,8)+0.1
} else {
dendrogram.margins = c(8,5,4,4)+0.1 }
# the following task will be plotted
plot.current.task = function(){
par(mar=dendrogram.margins)
########################################################################
########################################################################
# color graphs, but using different clustering algorithm (i.e. neighbor joining)
if(nj.cluster.analysis == TRUE) {
plot(nj(distance.table), font=1, tip.color=colors.of.pca.graph)
# alternatively, a traditional approach:
} else {
########################################################################
# clustering the distances stored in the distance.table
clustered.data = hclust(as.dist(distance.table),"ward")
# reordering the vector of colors to fit the order of clusters
colors.on.dendrogram = colors.of.pca.graph[clustered.data$order]
# converting the clusters into common dendrogram format
tree.with.clusters = as.dendrogram(clustered.data,hang=0)
# now, preparing the procedure for changing leaves' color attributes
# (this snippet is taken from "help(dendrapply)" and slightly adjusted)
local({
colLab <<- function(n) {
if(is.leaf(n)) {
a <- attributes(n)
i <<- i+1
attr(n, "nodePar") <-
c(a$nodePar, lab.col = mycols[i], pch = NA)
}
n
}
mycols = colors.on.dendrogram
i <- 0
})
# adding the attributes to subsequent leaves of the dendrogram,
# using the above colLab(n) function
dendrogram.with.colors = dendrapply(tree.with.clusters, colLab)
# finally, ploting the whole stuff
plot(dendrogram.with.colors,
main = graph.title,
horiz = dendrogram.layout.horizontal)
if(dendrogram.layout.horizontal == TRUE) {
title(sub=graph.subtitle)
} else {
title(sub=graph.subtitle, outer=TRUE, line=-1)
}
}
}}
# prepares a 2-dimensional plot (MDS) for plotting
if(analysis.type == "MDS") {
name.of.the.method = "Multidimensional Scaling"
distance.name.on.graph = ""
distance.name.on.file = ""
short.name.of.the.method = "MDS"
mds.results = cmdscale(distance.table,eig=TRUE)
# prepare the xy coordinates, add the margins, add the label offset
xy.coord = mds.results$points[,1:2]
if(text.id.on.graphs == "both") {
label.coord = cbind(mds.results$points[,1],(mds.results$points[,2] + (0.01*label.offset*
abs(max(mds.results$points[,2]) - min(mds.results$points[,2])))))
} else {
label.coord = xy.coord
}
plot.area = define.plot.area(mds.results$points[,1],mds.results$points[,2],
xymargins=add.to.margins,
v.offset=label.offset)
# define the plotting function needed:
plot.current.task = function(){
if(text.id.on.graphs == "points" || text.id.on.graphs == "both") {
plot(xy.coord, type="p",
ylab="", xlab="",
xlim=plot.area[[1]],ylim=plot.area[[2]],
main = graph.title,
sub = graph.subtitle,
col = colors.of.pca.graph,
lwd = plot.line.thickness)
}
if(text.id.on.graphs == "labels") {
plot(xy.coord, type="n",
ylab="", xlab="",
xlim=plot.area[[1]],ylim=plot.area[[2]],
main = graph.title,
sub = graph.subtitle,
col = colors.of.pca.graph,
lwd = plot.line.thickness)
}
if(text.id.on.graphs == "labels" || text.id.on.graphs == "both") {
text(label.coord, rownames(label.coord), col=colors.of.pca.graph)
}
axis(1,lwd=plot.line.thickness)
axis(2,lwd=plot.line.thickness)
box(lwd=plot.line.thickness)
}
}
# prepares Principal Components Analysis (PCA) for plotting
if(analysis.type == "PCV" || analysis.type == "PCR") {
# set some string information variables
name.of.the.method = "Principal Components Analysis"
short.name.of.the.method = "PCA"
distance.name.on.file = "PCA"
if(analysis.type == "PCV") {
pca.results = prcomp(table.with.all.freqs[,1:mfw])
distance.name.on.graph = "Covariance matrix"
} else if(analysis.type == "PCR") {
pca.results = prcomp(table.with.all.freqs[,1:mfw], scale=TRUE)
distance.name.on.graph = "Correlation matrix"
}
# get the variation explained by the PCs:
expl.var = round(((pca.results$sdev^2)/sum(pca.results$sdev^2)*100),1)
PC1_lab = paste("PC1 (",expl.var[1],"%)", sep="")
PC2_lab = paste("PC2 (",expl.var[2],"%)", sep="")
# prepare the xy coordinates, add the margins, add the label offset
xy.coord = pca.results$x[,1:2]
if(text.id.on.graphs == "both") {
label.coord = cbind(pca.results$x[,1],(pca.results$x[,2] + (0.01*label.offset*
abs(max(pca.results$x[,2]) - min(pca.results$x[,2])))))
} else {
label.coord = xy.coord
}
plot.area = define.plot.area(pca.results$x[,1],pca.results$x[,2],
xymargins=add.to.margins,
v.offset=label.offset)
# define the plotting function needed:
plot.current.task = function(){
if (pca.visual.flavour == "classic"){
if(text.id.on.graphs == "points" || text.id.on.graphs == "both") {
plot(xy.coord,
type="p",
xlim=plot.area[[1]],ylim=plot.area[[2]],
xlab="",ylab=PC2_lab,
main = graph.title,sub = paste(PC1_lab,"\n",graph.subtitle),
col=colors.of.pca.graph,
lwd=plot.line.thickness)
}
if(text.id.on.graphs == "labels") {
plot(xy.coord,
type="n",
xlim=plot.area[[1]],ylim=plot.area[[2]],
xlab="",ylab=PC2_lab,
main = graph.title,sub = paste(PC1_lab,"\n",graph.subtitle),
col=colors.of.pca.graph,
lwd=plot.line.thickness)
}
abline(h=0, v=0, col = "gray60",lty=2)
if(text.id.on.graphs == "labels" || text.id.on.graphs == "both") {
text(label.coord, rownames(pca.results$x), col=colors.of.pca.graph)
}
axis(1,lwd=plot.line.thickness)
axis(2,lwd=plot.line.thickness)
box(lwd=plot.line.thickness)
} else if(pca.visual.flavour == "loadings"){
biplot(pca.results,
col=c("grey70", "black"),
cex=c(0.7, 1), xlab="",
ylab=PC2_lab,
main=paste(graph.title, "\n\n", sep=""),
sub=paste(PC1_lab,"\n",graph.subtitle, sep=""),var.axes=FALSE)
} else if(pca.visual.flavour == "technical"){
layout(matrix(c(1,2), 2, 2, byrow = TRUE), widths=c(3,1))
biplot(pca.results, col=c("black", "grey40"), cex=c(1, 0.9), xlab="", ylab=PC2_lab, main=paste(graph.title, "\n\n", sep=""), sub=paste(PC1_lab,"\n",graph.subtitle, sep=""),var.axes=FALSE)
abline(h=0, v=0, col = "gray60",lty=3)
# add the subpanel to the right
row = mat.or.vec(nc=ncol(pca.results$x),nr=1)
for (i in 1:ncol(row)){row[,i]<-"grey45"}
# paint the first two PCS black -- i.e. the ones actually plotted
row[,1]<-"black"
row[,2]<-"black"
barplot(expl.var, col = row, xlab = "Principal components", ylab = "Proportion of variance explained (in %)")
# set a horizontal dashed line, indicating the psychological 5% barrier
abline(h=5, lty=3)
} else if(pca.visual.flavour == "symbols"){
# determine labels involved
labels = c()
for (c in rownames(pca.results$x)){
labels = c(labels, gsub("_.*","",c))
}
COOR = data.frame(pca.results$x[,1:2], LABEL=labels)
labels<-c(levels(COOR$LABEL))
# visualize
library(lattice)
sps <- trellis.par.get("superpose.symbol")
sps$pch <- 1:length(labels)
trellis.par.set("superpose.symbol", sps)
ltheme <- canonical.theme(color = FALSE)
lattice.options(default.theme = ltheme)
pl<-xyplot(data=COOR, x=PC2~PC1, xlab=paste(PC1_lab,"\n",graph.subtitle, sep=""), ylab=PC2_lab, groups=LABEL, sub="", key=list(columns=2, text=list(labels), points=Rows(sps, 1:length(labels))),
panel=function(x, ...){
panel.xyplot(x, ...)
panel.abline(v=0, lty=3)
panel.abline(h=0, lty=3)
})
plot(pl)
}
}
}
# prepares a list of dendrogram-like structures for a bootstrap consensus tree
# (the final tree will be generated later, outside the main loop of the script)
if (analysis.type == "BCT") {
mfw.info = paste(mfw.min,"-",mfw.max.original, sep="")
name.of.the.method = "Bootstrap Consensus Tree"
short.name.of.the.method = "Consensus"
# calculates the dendrogram for current settings
#
########################################################################
########################################################################
# compatibility mode: to make one's old experiments reproducible
if(nj.consensus.tree == TRUE) {
current.bootstrap.results = nj(as.dist(distance.table))
} else {
current.bootstrap.results = as.phylo(hclust(as.dist(distance.table),"ward"))
}
########################################################################
# adds the current dendrogram to the list of all dendrograms
bootstrap.list[[number.of.current.iteration]] = current.bootstrap.results }
# establishing the text to appear on the graph (unless "notitle" was chosen)
if(ngram.size > 1) {
ngram.value = paste(ngram.size,"-grams", sep="")
} else {
ngram.value = "" }
#
if(titles.on.graphs == TRUE) {
graph.title = paste(basename(getwd()),"\n",name.of.the.method)
if(analysis.type == "BCT") {
graph.subtitle = paste(mfw.info," MF",toupper(analyzed.features)," ",ngram.value," Culled @ ",culling.info,"%\n",
pronouns.info," ",distance.name.on.graph," Consensus ",consensus.strength," ",start.at.info, sep="")
} else {
graph.subtitle = paste(mfw.info," MF",toupper(analyzed.features)," ",ngram.value," Culled @ ",culling.info,"%\n",
pronouns.info," ",distance.name.on.graph," ",start.at.info, sep="") }
} else {
graph.title = ""
graph.subtitle = "" }
# name of the output file (strictly speaking: basename) for graphs
graph.filename = paste(basename(getwd()),short.name.of.the.method,mfw.info,
"MFWs_Culled",culling.info,pronouns.info,
distance.name.on.file,"C",consensus.strength,start.at.info, sep="_")
if(analysis.type == "BCT") {
graph.filename = paste(basename(getwd()),short.name.of.the.method,mfw.info,
"MFWs_Culled",culling.info,pronouns.info,
distance.name.on.file,"C",consensus.strength,start.at.info, sep="_")
} else {
graph.filename = paste(basename(getwd()),short.name.of.the.method,mfw.info,
"MFWs_Culled",culling.info,pronouns.info, distance.name.on.file,start.at.info, sep="_")
}
# #################################################
# plotting
# #################################################
# The core code for the graphic output (if bootstrap consensus tree
# is specified, the plot will be initiated later)
if(analysis.type != "BCT") {
if(display.on.screen == TRUE) {
plot.current.task()
}
if(write.pdf.file == TRUE) {
pdf(file = paste(graph.filename,"%03d",".pdf",sep=""),
width=plot.custom.width,height=plot.custom.height,
pointsize=plot.font.size)
plot.current.task()
dev.off()
}
if(write.jpg.file == TRUE) {
jpeg(filename = paste(graph.filename,"%03d",".jpg",sep=""),
width=plot.custom.width,height=plot.custom.height,
unit="in",res=300,pointsize=plot.font.size)
plot.current.task()
dev.off()
}
if(write.emf.file == TRUE) {
if(Sys.info()[["sysname"]] == "Windows") {
### Windows
win.metafile(filename = paste(graph.filename,"%03d",".emf",sep=""),
width=plot.custom.width,height=plot.custom.height,
res=300,pointsize=plot.font.size)
plot.current.task()
dev.off()
} else {
### Linux, Mac
cat("\n\n\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n")
cat("EMF file format is not supported by", Sys.info()[["sysname"]],"\n")
cat("You're suggested to try again with PNG, JPG or PDF.\n")
cat("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n")
}
}
if(write.png.file == TRUE) {
png(filename = paste(graph.filename,"%03d",".png",sep=""),
width=plot.custom.width,height=plot.custom.height,
unit="in",res=300,pointsize=plot.font.size)
plot.current.task()
dev.off()
}
}
##################################################
# writing distance table(s) to a file (if an appropriate option has been chosen)
if(save.distance.tables == TRUE) {
distance.table.filename = paste("distance_table_",mfw,"mfw_",current.culling,"c.txt",sep="")
write.table(file=distance.table.filename, distance.table)
}
# writing the words (or features) actually used in the analysis
if(save.analyzed.features == TRUE) {
cat(colnames(table.with.all.freqs[,1:mfw]),
file=paste("features_analyzed_",mfw,"mfw_",current.culling,"c.txt",sep=""),
sep="\n")
}
# writing the frequency table that was actually used in the analysis
if(save.analyzed.freqs == TRUE) {
write.table(table.with.all.freqs[,1:mfw],
file=paste("frequencies_analyzed_",mfw,"mfw_",current.culling,"c.txt",sep=""))
}
}    # <-- the internal loop for(i) returns here
# #################################################
# blank line on the screen
cat("\n")
}    # <-- the main loop for(j) returns here
# ################################################
# bootstrap visualization
if(analysis.type == "BCT") {
# as above, the task to be plotted is saved as a function
if(length(bootstrap.list) <= 2) {
cat("\n\nSORRY, BUT YOU ARE EXPECTING TOO MUCH...!\n\n",
"There should be at least 3 iterations to make a consensus tree\n\n")
} else {
plot.current.task = function(){
plot(consensus(bootstrap.list, p=consensus.strength),
type="u",
font=1,
lab4ut="axial",
tip.color = colors.of.pca.graph)
title (main = graph.title)
title (sub = graph.subtitle) }
# The core code for the graphic output... Yes, you are right: you’ve seen
# the same lines above. Instead of blaming us, write better code yourself
# and let us know.
if(display.on.screen == TRUE) {
plot.current.task()
}
if(write.pdf.file == TRUE) {
pdf(file = paste(graph.filename,"%03d",".pdf",sep=""),
width=plot.custom.width,height=plot.custom.height,
pointsize=plot.font.size)
plot.current.task()
dev.off()
}
if(write.jpg.file == TRUE) {
jpeg(filename = paste(graph.filename,"%03d",".jpg",sep=""),
width=plot.custom.width,height=plot.custom.height,
unit="in",res=300,pointsize=plot.font.size)
plot.current.task()
dev.off()
}
if(write.emf.file == TRUE) {
win.metafile(filename=paste(graph.filename,"%03d",".emf",sep=""),
width=plot.custom.width,height=plot.custom.height,
res=300,pointsize=plot.font.size)
plot.current.task()
dev.off()
}
if(write.png.file == TRUE) {
png(filename = paste(graph.filename,"%03d",".png",sep=""),
width=plot.custom.width,height=plot.custom.height,
unit="in",res=300,pointsize=plot.font.size)
plot.current.task()
dev.off()
}
}}
# #################################################
# final cleaning
cat("\n")
cat("removing most of the variables... \n")
cat("type ls() if you want to see what was not removed\n")
cat("if you are going to change the corpus, clean all: rm(list=ls())\n")
cat("\n")
# a list of variables not to be removed
do.not.remove = c("table.with.all.zscores", "table.with.all.freqs",
"frequencies.0.culling", "distance.table",
variables.not.to.be.removed)
# removing the variables which are not on the above list
list.of.variables = ls()
rm(list=list.of.variables[!(list.of.variables %in% do.not.remove)])
# #################################################
# TO DO:
# Christof: a loop for different start.at values
# Fotis: custom list of files does not work for sample labels
# applicable scenarios:
#
# 1. MDS, 100, En, pdf, png
# 2. MDS, 1000, 100% culling, En, pdf, png
# 3. PCA, corr., 100
# 4. Cons.Tree
# ...
# common wordlist when the number of full-sized novels >100
# (picking the first 100 by chance? extracting randomly 1M words?,
# extract a number of words, say 50k, from each novel?)
# dendrograms: ward, complete, average, nj
# rooted consensus trees?
# the code for MDS and PCA in different flavors deserves some comments!
fix(list.of.variables)
setwd("~/Desktop/Gone Girl Statistics")
authorship <- read.delim("~/Desktop/Gone Girl Statistics/authorship.txt")
viewData(authorship)
authorship.test <- read.delim("~/Desktop/Gone Girl Statistics/authorship.test.txt")
viewData(authorship.test)
authorship.train <- read.delim("~/Desktop/Gone Girl Statistics/authorship.train.txt")
viewData(authorship.train)
library(randomForest)
authorship.model.rf = randomForest(author ~ the + a + to + and + of + it + was + in. + that + on + for. + with + is + but + like + be + at, data=authorship.train, ntree=5000, mtry=15, importance=TRUE)
authorship.test$pred.author.rf = predict(authorship.model.rf, authorship.test, type="response")
table(authorship.test$author, authorship.test$pred.author.rf)
authorship.model.rf = randomForest(author ~ the + a + to + and + of + it , data=authorship.train, ntree=5000, mtry=15, importance=TRUE)
> authorship.test$pred.author.rf = predict(authorship.model.rf, authorship.test, type="response")
> table(authorship.test$author, authorship.test$pred.author.rf)
authorship.model.rf = randomForest(author ~ the + a + to + and + of + it + was + in. + that + on + for. + with, data=authorship.train, ntree=5000, mtry=15, importance=TRUE)
authorship.test$pred.author.rf = predict(authorship.model.rf, authorship.test, type="response")
table(authorship.test$author, authorship.test$pred.author.rf)
